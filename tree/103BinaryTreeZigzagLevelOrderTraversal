--------------------BSF version
public class Solution {
public List<List> zigzagLevelOrder(TreeNode root) {
List<List> res = new ArrayList<>();
if(root == null) return res;

    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    boolean order = true;
    int size = 1;

    while(!q.isEmpty()) {
        List<Integer> tmp = new ArrayList<>();
        for(int i = 0; i < size; ++i) {
            TreeNode n = q.poll();
            if(order) {
                tmp.add(n.val);
            } else {
                tmp.add(0, n.val);
            }
            if(n.left != null) q.add(n.left);
            if(n.right != null) q.add(n.right);
        }
        res.add(tmp);
        size = q.size();
        order = order ? false : true;
    }
    return res;
}
}

--------------------DSF version
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();//do I need to specify element type?
        levelOrderHelper(root,0,result);
        return result;
    }
    private void levelOrderHelper(TreeNode root,int levelIndex,List<List<Integer>> result){
        if(root!=null){
            if(result.size()<=levelIndex){
                ArrayList<Integer> levelResult=new ArrayList<Integer>();
                result.add(levelResult);
            }
                List<Integer> levelResult=result.get(levelIndex);
            //use visit every element in the same order, but add them to the start of the layer list when 
                if(levelIndex%2==0 )levelResult.add(root.val);
                else levelResult.add(0,root.val);
            
        levelOrderHelper(root.left,levelIndex+1,result);
        levelOrderHelper(root.right,levelIndex+1,result);
        }
    }
}
