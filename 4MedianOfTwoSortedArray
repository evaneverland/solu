Version1

Version2
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    	int len=nums1.length+nums2.length;
    	if((len&1)==0)
    		return (findKthSmallest(len/2,0,0,nums1,nums2)+findKthSmallest(len/2+1,0,0,nums1,nums2))/2.0;
    	else
    		return(findKthSmallest(len/2+1,0,0,nums1,nums2));//find the element located at pos k of the whole array starting from pos 0
    }
    private int findKthSmallest(int k,int start1,int start2,int[] nums1,int[] nums2) {//start1,start2 is the index in array1,2 respectively
    	int len1=nums1.length;
    	int len2=nums2.length;
        //start1 and start2 won't be geq len at the same time
        if(start1>=len1) {//in this case all the elments in array 1 can not be the kth smallest
    		return nums2[start2+k-1];//it might based on the current start
    	}else if(start2>=len2) {
    		return nums1[start1+k-1];
    	}
    	//k must result in 1 since in each recursion k=k-k/2
    	if(k==1) {//in this case newStart = start
    		//since we prevent newStart from becoming greater than array length in each recursion, no need to worry about indexOutOfRange
    		return nums1[start1]>nums2[start2]?nums2[start2]:nums1[start1];
    	}
    	int newStart1=start1+k/2-1;
    	int newStart2=start2+k/2-1;
    	if(newStart1>=len1) {
    		newStart1=len1-1;
    	}
    	if(newStart2>=len2) {
    		newStart2=len2-1;
    	}
    	if(nums1[newStart1]>nums2[newStart2]) {
    		if(newStart2+1>=len2) {
    			return nums1[start1+start2+k-len2-1];//in this case all the elments in array 1 can not be the kth smallest
                //since start1 is the # of elements eliminated in array1, start2 is the # of elements eliminated in array2, k is the # of elements have yet to be eliminated, thus start1+start2+k is the initial k
    		}else{
    			return findKthSmallest(k-k/2,start1,newStart2+1,nums1,nums2);
    			}
    		//nums2[newStart2] cannot be the kth smallest,can at most be the (k-1)th smallest, +1
    	}else {
    		if(newStart1+1>=len1) {
    			return nums2[start1+start2+k-len1-1];
    		}else {
    			return findKthSmallest(k-k/2,newStart1+1,start2,nums1,nums2);
    		}
    	}   	
    }
}
